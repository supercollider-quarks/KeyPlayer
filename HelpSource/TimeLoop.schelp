TITLE:: TimeLoop
summary:: A list of recorded absolute and delta times.
categories:: Libraries>JITLib
related:: Classes/KeyLoop, Classes/KeyPlayer, Classes/GamePad

DESCRIPTION::

TimeLoop is the base class for many classes that can record controller events nd play them back flexibly.

TimeLoop records events as
list::
## a list of event times only, absolute and relative
## in playback, these times are scalable in tempo,
## quantizable to a total duration and a quant step
## segments can be selected from it 
## step size, playback direction and a jitter factor can also be set.

## it has function what to do on event time
## it keeps multiple recorded lists 
## the current list can be switched while playing
::

Its subclasses add features: 

KeyLoop 

- event has time and single key as ID for events, e.g. char of keystroke on a computer keyboard
-   lookup in dict of functions what to do for each key

KeyLoop2

- can have more args after key that go into the function(s) as args.

KtlLoop - list of key/value pairs

- single func, all set e.g. a specific proxy to new settings
- can rescale parameter values
shift, scale, invert;

KtlLoop2 - list of key/value pairs
- single func, all set e.g. a specific proxy to new settings

AutoLoop - ... maybe later?


CLASSMETHODS::

METHOD:: new
make a new instance, with a key and a function to evaluate on playback.

INSTANCEMETHODS::

subsection::Instance Variables

METHOD:: key
the key of the TimeLoop

METHOD:: task
a taskproxy for playback of recorded list

METHOD:: func
the function to evaluate when playing back for each recorded event

METHOD:: list
the current list of recorded events

METHOD:: verbosity
get and set verbosity level for debugging. 0 is off.


subsection:: Recording

METHOD:: startRec
start recording. if instant = true, recording starts instantly;
otherwise, recording will start with the first recorded event.

METHOD:: recordEvent
record a new event into the list. 
event will consist of [abstime, deltatime ] ++ ... args provided

METHOD:: stopRec
stop recording

METHOD:: toggleRec
toggle recording on/off

METHOD:: isRecording
flag whether TimeLoop is currently recording

METHOD:: getTimes
get current absolute and delta recording times 

METHOD:: addList
add the current list to the lists, e.g. after recording.

METHOD:: clear
store current list and clear for recording


subsection:: Playback

METHOD:: play
play the recorded events using the taskproxy

METHOD:: pause, resume
pause and resume the playback taskproxy

METHOD:: stop
stop the playback taskproxy 

METHOD:: togglePlay
toggle between play and stop

METHOD:: isPlaying
flag whether internal taskproxy is playing

METHOD:: loop
get and set flag whether playback loops.

METHOD:: tempo
get and set playback tempo

METHOD:: startPos
get and set where in (normalized) range of list event playback starts

METHOD:: length
get and set which length in (normalized) range of list event playback to use

METHOD:: endPos
startPos + length, position in normalized range where playback ends or loops

METHOD:: jitter
get and set how much playback event order should jitter.

METHOD:: step
get and set how much playback index moves at each step. 1 = forward.

METHOD:: forward
set step to +1
METHOD:: reverse
set step to -1

METHOD:: isReversed
flag whether playback is reversed

METHOD:: flip
reverse playback direction

METHOD:: resetLoop
reset loop playback params to default


METHOD:: quantizeTo
quantize recorded delta times for playback
ARGUMENT:: quant
the quant to round absolute times to
ARGUMENT:: totalDur
the duration to set the full duration to

METHOD:: unquantize
reset delta times to unquantized state



subsection:: Multiple List Handling

METHOD:: lists
the recorded lists. first is newest list.

METHOD:: listInfo
print indices and sizes of the current lists

METHOD:: setList
set current list to one of the stored lists, by index.

METHOD:: listDur
get the current list duration

METHOD:: maxIndex
get the last index of current list

METHOD:: currIndex
get the index of the current list in lists

METHOD:: numLists
get the number of recorded lists

METHOD:: printLists
print the lists in readabe form



private:: init, initTask, postRecFix, putDeltaInPrev
private:: printOn, storeArgs


EXAMPLES::

code::

SynthDef(\toc, {
Out.ar(0, XLine.ar(1, 0.01, 0.02, doneAction: 2)
* SinOsc.ar([600, 1300, 4500], 0, [0.3, 0.2, 0.1]));
}).add;

(instrument: \toc).play;

	// make a TimeLoop
z = TimeLoop(\time, {|ev| (instrument: \toc).play; });
z.verbosity = 2;

z.startRec;
	// do this multiple times
z.recordEvent; (instrument: \toc).play;
z.stopRec;

	// post info on the recorded list
z.listInfo;
z.printLists;

z.play;

z.loop = true;
z.play;
z.tempo = 0.3;
z.tempo = 3;
z.tempo = 1;
z.loop = false;
z.step = -1;

z.jitter = 1.0;

z.resetLoop;

z.verbosity = 1;

z.listDur;
z.quantizeTo(0.25, 8);
z.printLists;

z.stop;

z.startRec; 
	// do this multiple times
z.recordEvent(\test); (instrument: \toc).play;

z.stopRec; 

z.printLists;

::